<?xml version="1.0" encoding="utf-8"?>
<s:TitleWindow xmlns:fx="http://ns.adobe.com/mxml/2009"
				   xmlns:s="library://ns.adobe.com/flex/spark"
				   xmlns:mx="library://ns.adobe.com/flex/mx"
				   title="Article Editor"
				   creationComplete="init()"
				   close="cancelButtonClickEventHandler()"
				   defaultButton="{saveButton}">	
	<s:layout>
		<s:VerticalLayout gap="5" paddingBottom="10"/>
	</s:layout>
	<fx:Binding destination="titleTextArea.text"
				source="articleTitle"
				twoWay="true" />
	<fx:Binding destination="authorsLineTextArea.text"
				source="authorsLine"
				twoWay="true" />
	<fx:Binding destination="journalAbbrTextInput.text"
				source="journalAbbr"
				twoWay="true" />
	<fx:Binding destination="journalTitleTextInput.text"
				source="journalTitle"
				twoWay="true" />
	<fx:Binding destination="yearTextInput.text"
				source="year"
				twoWay="true" />
	<fx:Binding destination="issueTextInput.text"
				source="issue"
				twoWay="true" />
	<fx:Binding destination="volumeTextInput.text"
				source="volume"
				twoWay="true" />
	<fx:Binding destination="pagesTextInput.text"
				source="pages"
				twoWay="true" />
	<fx:Binding destination="abstractTextArea.text"
				source="abstract"
				twoWay="true" />
	<fx:Binding destination="keywordsTextArea.text"
				source="keywordsLine"
				twoWay="true" />
	<fx:Binding destination="pmidTextInput.text"
				source="pmid"
				twoWay="true" />
	<fx:Binding destination="doiTextInput.text"
				source="doi"
				twoWay="true" />
	<fx:Binding destination="urlsTextArea.text"
				source="urlsLine"
				twoWay="true" />

	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
		<mx:StringValidator id="titleV"
							source="{titleTextArea}"
							property="text"
							required="true" />
		<mx:StringValidator id="authorsV"
							source="{authorsLineTextArea}"
							property="text"
							required="true" />
		<mx:StringValidator id="journalAbbrV"
							source="{journalAbbrTextInput}"
							property="text"
							required="true" />		
		<mx:NumberValidator id="yearV"
							source="{yearTextInput}"
							property="text"
							required="true" />		
	</fx:Declarations>
	<fx:Script>
		<![CDATA[
			import edu.isi.bmkeg.digitalLibrary.citations.events.UserRequestArticleEditorEvent;
			import edu.isi.bmkeg.digitalLibrary.citations.events.UserRequestCorpusEditorEvent;
			import edu.isi.bmkeg.digitalLibrary.citations.events.UserRequestSaveArticleEvent;
			import edu.isi.bmkeg.digitalLibrary.model.citations.ArticleCitation;
			import edu.isi.bmkeg.digitalLibrary.model.citations.ID;
			import edu.isi.bmkeg.digitalLibrary.model.citations.Journal;
			import edu.isi.bmkeg.digitalLibrary.model.citations.Keyword;
			import edu.isi.bmkeg.digitalLibrary.model.citations.Person;
			import edu.isi.bmkeg.digitalLibrary.model.citations.URL;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.core.UIComponent;
			import mx.utils.StringUtil;
			import mx.validators.Validator;
			
			// TODO Some improvements:
			//   - Resizable Window, resizable controls (especially TextAreas)
			//     (see http://flexdevtips.blogspot.com/2010/06/flex-4-spark-resizable-controls.html)
			//   - Enable [Save] button only when all fields are valid
			//   - Autocomplete for Journal Abbreviations (see http://flex-autocomplete.com/)
			
			public static const VPDMF_ID_CHANGED:String = "vpdmfIdChanged";
			public static const JOURNAL_ABBR_CHANGED:String = "journalAbbrChanged";

			private var _myValidators:Array;
			
			private var _vpdmfId:int;
			
			private var _cachedJournalAbbr:String;
			
			internal var _cachedArticleCitation:ArticleCitation;
						
			public var journalId:int;
			
			[Bindable]
			public var journalAbbr:String;

			[Bindable]
			public var articleTitle:String;
			
			[Bindable]
			public var authorsLine:String;
			
			[Bindable]
			public var journalTitle:String;
			
			[Bindable]
			public var year:String;
			
			[Bindable]
			public var issue:String;
			
			[Bindable]
			public var volume:String;
			
			[Bindable]
			public var pages:String;
			
			[Bindable]
			public var abstract:String;
			
			[Bindable]
			public var keywordsLine:String;
			
			[Bindable]
			public var pmid:String;
			
			[Bindable]
			public var doi:String;
			
			[Bindable]
			public var urlsLine:String;
			
			
			// API Methods
			
			[Bindable("vpdmfIdChanged")]
			public function get vpdmfId():int
			{
				return _vpdmfId;
			}
			
			public function set vpdmfId(v:int):void
			{
				if (_vpdmfId != v)
				{
					_vpdmfId = v;
					dispatchEvent(new Event(VPDMF_ID_CHANGED));					
				}
			}
			
			public function clearFormFields():void
			{
				vpdmfId  = -1;
				journalId = -1;
				articleTitle = null;
				authorsLine = null;
				journalAbbr = null;
				journalTitle = null;
				year = null;
				issue = null;
				volume = null;
				pages = null;
				abstract = null;
				keywordsLine = null;
				pmid  =null;
				doi = null;
				urlsLine  =null;
			
				_cachedJournalAbbr = null;
				clearValidationErrors();
				
			}
			
			public function instantiateArticleCitation():ArticleCitation
			{
				var article:ArticleCitation  = new ArticleCitation();
				
				article.vpdmfId  = vpdmfId;
				article.title = articleTitle;
				article.abstractText = abstract;
				article.pubYear = Number(year);
				article.pages = pages;
				article.pmid = Number(pmid);
				
				if (keywordsLine && StringUtil.trim(keywordsLine).length > 0)
				{
					article.keywordList = 
						new ArrayCollection(string2keywords(ViewHelper.textLine2array(keywordsLine,";")
							,_cachedArticleCitation));					
				}
				if (authorsLine && StringUtil.trim(authorsLine).length > 0)
				{
					article.authorList = 
						new ArrayCollection(string2authors(ViewHelper.textLine2array(authorsLine,";"),
							_cachedArticleCitation));										
				}
				if (urlsLine && StringUtil.trim(urlsLine).length > 0)
				{
					article.fullTextUrl = 
						new ArrayCollection(string2urls(ViewHelper.textLine2array(urlsLine,";"),
							_cachedArticleCitation));
				}
				if (doi && StringUtil.trim(pmid).length > 0)
				{
					var id:ID = new ID();
					id.idType = "DOI";
					id.idValue = doi;
					id.vpdmfId = -1;
					if (_cachedArticleCitation && 
						_cachedArticleCitation.ids)
					{
						for each (var cid:ID in _cachedArticleCitation.ids)
						{
							if (cid.idType == "DOI")
							{
								id.vpdmfId = cid.vpdmfId;
							}
						}
					}
					article.ids = new ArrayCollection();
					article.ids.addItem(id);
				}

				article.volume = volume;
				article.issue = issue;
				article.journal = instantiateJournal();
				
				return article;
			}
			
			public function loadArticleCitation(article:ArticleCitation):void
			{
				_cachedArticleCitation = article;
				
				vpdmfId = article.vpdmfId;
				articleTitle = article.title;
				abstract = article.abstractText;
				year = String(article.pubYear);
				pages = article.pages;
				pmid = String(article.pmid);
				if (article.keywordList && article.keywordList.length > 0)
				{
					keywordsLine = keywords2strings(article.keywordList.source).join(";");					
				}
				else
				{
					keywordsLine  =null;
				}
				if (article.authorList && article.authorList.length > 0)
				{
					authorsLine = authors2strings(article.authorList.source).join(";");
				}
				else
				{
					authorsLine = null;
				}
				if (article.fullTextUrl && article.fullTextUrl.length > 0)
				{
					urlsLine = urls2strings(article.fullTextUrl.source).join(";");
				}
				else
				{
					urlsLine = null;
				}
				doi = null;
				if (article.ids)
				{
					for each (var id:ID in article.ids)
					{
						if (id.idType == "DOI")
						{
							doi = id.idValue;				
						}
					}
				}
				
				volume = article.volume;
				issue = article.issue;
				loadJournalFields(article.journal);
			}
			
			
			
			public function clearJournalFields():void
			{
				journalId = -1;
				journalTitle = null;
			}

			public function loadJournalFields(j:Journal):void
			{
				_cachedJournalAbbr = j.abbr;
				journalAbbr = j.abbr;
				journalId = j.vpdmfId;
				journalTitle = j.journalTitle;
			}
			
			public function setErrorJournalNotFound():void
			{
				journalAbbrTextInput.errorString = "Journal not found in database";	
			}

			public function clearErrorJournalNotFound():void
			{
				journalAbbrTextInput.errorString = "";					
			}
				
			/**
			 * Converts an array of strings into an array of Keywords 
			 */ 
			 internal static function string2keywords(s:Array, cachedArticle:ArticleCitation = null):Array
			{
				var k:Array =  new Array(s.length);
				for (var i:int = 0; i < s.length; i++) 
				{
					var x:Keyword = new Keyword();
					x.value = s[i];
					x.vpdmfId = -1;
					if (cachedArticle && cachedArticle.keywordList)
					{
						for each (var ki:Keyword in cachedArticle.keywordList)
						{
							if (ki.value == x.value)
							{
								x.vpdmfId = ki.vpdmfId;
							}
						}
					}
					k[i] = x;
				}
				return k;
			}

			/**
			 * Converts an array of Keywords into an array of Strings 
			 */ 
			internal static function keywords2strings(k:Array):Array
			{
				var s:Array =  new Array(k.length);
				for (var i:int = 0; i < k.length; i++) 
				{
					s[i] = Keyword(k[i]).value;
				}
				return s;
			}

			/**
			 * Converts an array of strings into an array of URLs 
			 */ 
			internal static function string2urls(s:Array, cachedArticle:ArticleCitation = null):Array
			{
				var u:Array =  new Array(s.length);
				for (var i:int = 0; i < s.length; i++) 
				{
					var x:URL = new URL();
					x.url = s[i];
					x.vpdmfId = -1;
					if (cachedArticle && cachedArticle.fullTextUrl)
					{
						for each (var ui:URL in cachedArticle.fullTextUrl)
						{
							if (ui.url == x.url)
							{
								x.vpdmfId = ui.vpdmfId;
							}
						}
					}
					u[i] = x;
				}
				return u;
			}

			/**
			 * Converts an array of URLs into an array of Strings 
			 */ 
			internal static function urls2strings(u:Array):Array
			{
				var s:Array =  new Array(u.length);
				for (var i:int = 0; i < u.length; i++) 
				{
					s[i] = URL(u[i]).url;
				}
				return s;
			}
			
			/**
			 * Converts an array of strings into an array of Persons 
			 */ 
			internal static function string2authors(s:Array, cachedArticle:ArticleCitation = null):Array
			{
				var a:Array =  new Array(s.length);
				for (var i:int = 0; i < s.length; i++) 
				{
					var p:Person = new Person();
					p.fullName = s[i];
					p.vpdmfId = -1;
					if (cachedArticle && cachedArticle.authorList)
					{
						for each (var pi:Person in cachedArticle.authorList)
						{
							if (pi.fullName == p.fullName)
							{
								p.vpdmfId = pi.vpdmfId;
							}
						}
					}
					a[i] = p;
				}
				return a;
			}
			
			/**
			 * Converts an array of Persons into an array of Strings 
			 */ 
			internal static function authors2strings(a:Array):Array
			{
				var s:Array =  new Array(a.length);
				for (var i:int = 0; i < a.length; i++) 
				{
					s[i] = Person(a[i]).fullName;
				}
				return s;
			}
			
			public function instantiateJournal():Journal
			{
				var journal:Journal = new Journal();
				journal.vpdmfId = journalId;
				journal.abbr = journalAbbr;
				journal.journalTitle = journalTitle;
				
				return journal;
			}

			private function clearValidationErrors():void
			{				
				if (_myValidators)
				{
					for (var i:int = 0; i < _myValidators.length; i++) 
					{
						var v:Validator = _myValidators[i] as Validator;
						
						if (v && v.source && v.source is UIComponent)
						{
							UIComponent(v.source).errorString = "";
						}
						
					}
				}
			}
			
			private function saveButtonClickEventHandler(event:MouseEvent):void
			{
				var errorsArray:Array = Validator.validateAll(_myValidators);
				
				if (errorsArray.length == 0)
				{
					if (validateJournal()) 
					{
						dispatchEvent(new UserRequestSaveArticleEvent(instantiateArticleCitation()));						
					}
					else
					{
						setErrorJournalNotFound();
					}
				}
			}

			private function journalAbbrCommitHandler():void
			{
				if (journalAbbr != _cachedJournalAbbr)
				{
					_cachedJournalAbbr = journalAbbr;
					dispatchEvent(new Event(JOURNAL_ABBR_CHANGED));									
				}
			}
			
			private function validateJournal():Boolean
			{
				return journalId != -1;
			}
			
			private function cancelButtonClickEventHandler():void
			{
				dispatchEvent(new UserRequestArticleEditorEvent(UserRequestArticleEditorEvent.CLOSE));
			}
			
			private function init():void
			{
				_myValidators = [titleV,authorsV,journalAbbrV];
			}

		]]>
	</fx:Script>
	<s:Scroller height="100%" width="100%">
		<s:VGroup>
			<s:Form id="form1" left="10" right="3" top="10" bottom="534">
				<s:layout>
					<s:FormLayout/>
				</s:layout>
				<!-- <s:FormHeading label="Article"/> -->
				<s:FormItem label="Title" required="true">
					<s:TextArea id="titleTextArea" width="316" height="49" prompt="Title" text="{articleTitle}"/>
				</s:FormItem>
				<s:FormItem label="Authors" required="true">
					<s:TextArea id="authorsLineTextArea" width="316" height="30"
								prompt="FirstName LastName; FirstName LastName ..." text="{authorsLine}"/>
				</s:FormItem>
				<s:FormItem label="Journal" required="true">
					<s:TextInput id="journalAbbrTextInput" width="200" prompt="Journal Abbrebiation"
								 text="{journalAbbr}"
								 valueCommit="journalAbbrCommitHandler()" />
					<s:TextInput id="journalTitleTextInput" width="316" 
								 text="{journalTitle}" enabled="false"/>
				</s:FormItem>
				<s:FormItem label="Year" required="true">
					<s:TextInput id="yearTextInput" width="61" prompt="year" text="{year}"
								 restrict="0-9" maxChars="4"/>			
				</s:FormItem>
				<s:FormItem label="Vol."  >
					<s:HGroup>
						<s:TextInput id="volumeTextInput" width="39" prompt="Volume" text="{volume}"/>
						<s:TextInput id="issueTextInput" width="39" prompt="Issue" text="{issue}"/>
						<s:TextInput id="pagesTextInput" width="54" prompt="Pages" text="{pages}"/>				
					</s:HGroup>
				</s:FormItem>
				<s:FormItem label="Abstract">
					<s:TextArea id="abstractTextArea" width="316"
								text="{abstract}"/>
				</s:FormItem>
				<s:FormItem label="Keywords">
					<s:TextArea id="keywordsTextArea" width="316" height="30" prompt="Keyword 1; Keyword 2 ..."
								text="{keywordsLine}"/>
				</s:FormItem>
				<s:FormItem label="PMID" >
					<s:TextInput id="pmidTextInput" width="200" restrict="0-9"
								 text="{pmid}"/>
				</s:FormItem>
				<s:FormItem label="DOI" >
					<s:TextInput id="doiTextInput" width="200" 
								 text="{doi}"/>
				</s:FormItem>
				<s:FormItem label="URLs">
					<s:TextArea id="urlsTextArea" width="316" height="30" prompt="URL 1; URL 2 ... "
								text="{urlsLine}"/>
				</s:FormItem>
			</s:Form>
			<s:HGroup paddingLeft="10">
				<s:Button id="saveButton" x="10" y="214" label="Save" click="saveButtonClickEventHandler(event)" />
				<s:Button id="cancelButton" x="88" y="214" label="Cancel"
						  click="cancelButtonClickEventHandler()"/>		
			</s:HGroup>					
		</s:VGroup>
	</s:Scroller>
</s:TitleWindow>
