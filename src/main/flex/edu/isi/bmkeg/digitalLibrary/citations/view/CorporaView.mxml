<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"
		 xmlns:s="library://ns.adobe.com/flex/spark"
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 width="200" height="194" xmlns:events="edu.isi.bmkeg.digitalLibrary.citations.events.*" xmlns:metadata="flex.lang.reflect.metadata.*">
	<s:layout>
		<s:VerticalLayout/>
	</s:layout>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<fx:Script>
		<![CDATA[
			import edu.isi.bmkeg.digitalLibrary.citations.events.UserRequestCorpusEditorEvent;
			import edu.isi.bmkeg.vpdmf.model.dao.LightViewInstance;
			
			import mx.collections.ArrayCollection;
			
			import spark.collections.Sort;
			import spark.collections.SortField;
			import spark.events.IndexChangeEvent;
			
			private static const CORPORA_SORT_FIELD_NAME:String = "vpdmfLabel";

			private var _corpora:ArrayCollection;
			
//			private var _corporaSelectedItem:LightViewInstance;
//			
			[Bindable]
			private var _sortedCorpora:ArrayCollection;
			
			// API Methods
			
			public function get corpora():ArrayCollection 
			{
				return _corpora;
			}
			
			[Bindable]
			public function set corpora(c:ArrayCollection):void 
			{
				if (c != _corpora) {
					_corpora = c;
					if (c != null) {
						// sorts it
						_sortedCorpora = new ArrayCollection(c.source);
						var sort:Sort = new Sort();
						sort.fields = [ new SortField(CORPORA_SORT_FIELD_NAME) ];
						_sortedCorpora.sort = sort;
						_sortedCorpora.refresh();
												
					}
				}
				
			}
			
			public function get selectedCorpus():LightViewInstance
			{
				if (corporaList.selectedIndex == -1)
				{
					return null;
				}
				else
				{
					return corporaList.selectedItem as LightViewInstance;
				}
			}
			
			public function clearSelection():void
			{
				corporaList.selectedIndex = -1;
			}
			
			public function get selectedCorpusName():String
			{
				// TODO replace by corpus.name
				var li:LightViewInstance = corporaList.selectedItem as LightViewInstance;
				if (li)
				{
					return li.vpdmfLabel;
				}
				else
				{
					return null;
				}
			}
			
			public function set selectedCorpusName(corpusName:String):void
			{
				for (var i:int; i < _sortedCorpora.length; i++)
				{
					var li:LightViewInstance = LightViewInstance(_sortedCorpora.getItemAt(i));
					
					// TODO replace vpdmfLabel by corpus.name
					if (li.vpdmfLabel == corpusName)
					{
						corporaList.selectedIndex = i;
						break;
					}
				}
			}

			private function selectionChangeHandler(event:IndexChangeEvent):void
			{
				dispatchEvent(event);
			}
			
			private function addCorpusClickHandler(event:MouseEvent):void
			{
				var openEvent:UserRequestCorpusEditorEvent = 
					new UserRequestCorpusEditorEvent(UserRequestCorpusEditorEvent.OPEN);
				
				dispatchEvent(openEvent);
			}

			private function editCorpusClickHandler(event:MouseEvent):void
			{
				var li:LightViewInstance = LightViewInstance(corporaList.selectedItem)
				var corpusId:int = li.readUIDValue();
				var openEvent:UserRequestCorpusEditorEvent = 
					new UserRequestCorpusEditorEvent(UserRequestCorpusEditorEvent.OPEN,corpusId);
				
				dispatchEvent(openEvent);
			}

			// Helper functions
			
			private function corpusLabelFunction(option:Object):String
			{
				return LightViewInstance(option).vpdmfLabel;
			}

		]]>
	</fx:Script>
	<fx:Metadata>
		[Event(name="change", type="spark.events.IndexChangeEvent")]
	</fx:Metadata>
	<s:BorderContainer id="border" width="100%" height="100%" borderColor="696969"
					   borderWeight="1">
		<s:layout>
			<s:VerticalLayout />
		</s:layout>
		<s:List id="corporaList" width="100%" height="100%" minHeight="100" borderVisible="false"
				change="selectionChangeHandler(event)" dataProvider="{_sortedCorpora}"
				labelFunction="corpusLabelFunction">
			<s:layout>
				<s:VerticalLayout gap="1"/>
			</s:layout>
		</s:List>
		<s:HGroup gap="0">
			<s:Button id="addCorpus" width="28" height="16" label="+"
					  click="addCorpusClickHandler(event)" 
					  toolTip="Create a corpus"/>
			<s:Button id="removeCorpus" width="25" height="16" label="-"
					  toolTip="Delete a corpus" 
					  enabled="{corporaList.selectedIndex != -1}" />
			<s:Button id="editCorpus" width="25" height="16" label="*"
					  toolTip="Edit a corpus" 
					  click="editCorpusClickHandler(event)" 
					  enabled="{corporaList.selectedIndex != -1}"/>		
		</s:HGroup>
	</s:BorderContainer>
</s:Group>
