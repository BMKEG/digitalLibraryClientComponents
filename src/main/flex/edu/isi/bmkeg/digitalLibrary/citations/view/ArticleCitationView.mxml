<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"
		xmlns:s="library://ns.adobe.com/flex/spark"
		xmlns:mx="library://ns.adobe.com/flex/mx" >	
	<s:layout>
		<s:VerticalLayout gap="10" paddingBottom="20" paddingLeft="5" paddingRight="5"
						  paddingTop="20"/>
	</s:layout>

	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<fx:Script>
		<![CDATA[
			import edu.isi.bmkeg.digitalLibrary.model.citations.ArticleCitation;
			import edu.isi.bmkeg.digitalLibrary.model.citations.ID;
			import edu.isi.bmkeg.digitalLibrary.model.citations.Journal;
			import edu.isi.bmkeg.digitalLibrary.model.citations.Keyword;
			import edu.isi.bmkeg.digitalLibrary.model.citations.Person;
			import edu.isi.bmkeg.digitalLibrary.model.citations.URL;
			
			import mx.collections.ArrayCollection;
			
			// TODO Some improvements:
			//   - Resizable Window, resizable controls (especially TextAreas)
			//     (see http://flexdevtips.blogspot.com/2010/06/flex-4-spark-resizable-controls.html)

			private var _loadedArticle:ArticleCitation;
			
			public function get loadedArticle():ArticleCitation
			{
				return _loadedArticle;
			}
			
			[Bindable]
			public var journalAbbr:String;

			[Bindable]
			public var articleTitle:String;
			
			[Bindable]
			public var authorsLine:String;
			
			[Bindable]
			public var journalTitle:String;
			
			[Bindable]
			public var year:String;
			
			[Bindable]
			public var issue:String;
			
			[Bindable]
			public var volume:String;
			
			[Bindable]
			public var pages:String;
			
			[Bindable]
			public var abstract:String;
			
			[Bindable]
			public var keywordsLine:String;
			
			[Bindable]
			public var pmid:String;
			
			[Bindable]
			public var doi:String;
			
			[Bindable]
			public var urlsLine:String;
			
			
			// API Methods
			
			public function clearFormFields():void
			{
				_loadedArticle = null;
				
				articleTitle = null;
				authorsLine = null;
				journalAbbr = null;
				journalTitle = null;
				year = null;
				issue = null;
				volume = null;
				pages = null;
				abstract = null;
				keywordsLine = null;
				pmid  =null;
				doi = null;
				urlsLine  =null;
			}
			public function loadArticleCitation(article:ArticleCitation):void
			{
				_loadedArticle = article;
				
				articleTitle = article.title;
				abstract = article.abstractText;
				year = String(article.pubYear);
				pages = article.pages;
				pmid = String(article.pmid);
				if (article.keywordList && article.keywordList.length > 0)
				{
					keywordsLine = keywords2strings(article.keywordList.source).join(";");					
				}
				else
				{
					keywordsLine  =null;
				}
				if (article.authorList && article.authorList.length > 0)
				{
					authorsLine = authors2strings(article.authorList.source).join(";");
				}
				else
				{
					authorsLine = null;
				}
				if (article.fullTextUrl && article.fullTextUrl.length > 0)
				{
					urlsLine = urls2strings(article.fullTextUrl.source).join(";");
				}
				else
				{
					urlsLine = null;
				}
				doi = null;
				if (article.ids)
				{
					for each (var id:ID in article.ids)
					{
						if (id.idType == "DOI")
						{
							doi = id.idValue;				
						}
					}
				}
				
				volume = article.volume;
				issue = article.issue;
				loadJournalFields(article.journal);
			}
			
			
			
			public function clearJournalFields():void
			{
				journalAbbr = null;
				journalTitle = null;
			}

			public function loadJournalFields(j:Journal):void
			{
				journalAbbr = j.abbr;
				journalTitle = j.journalTitle;
			}
			
			/**
			 * Converts an array of Keywords into an array of Strings 
			 */ 
			internal static function keywords2strings(k:Array):Array
			{
				var s:Array =  new Array(k.length);
				for (var i:int = 0; i < k.length; i++) 
				{
					s[i] = Keyword(k[i]).value;
				}
				return s;
			}

			/**
			 * Converts an array of URLs into an array of Strings 
			 */ 
			internal static function urls2strings(u:Array):Array
			{
				var s:Array =  new Array(u.length);
				for (var i:int = 0; i < u.length; i++) 
				{
					s[i] = URL(u[i]).url;
				}
				return s;
			}
			
			/**
			 * Converts an array of Persons into an array of Strings 
			 */ 
			internal static function authors2strings(a:Array):Array
			{
				var s:Array =  new Array(a.length);
				for (var i:int = 0; i < a.length; i++) 
				{
					s[i] = Person(a[i]).fullName;
				}
				return s;
			}
			
		]]>
	</fx:Script>
	<s:Group width="100%">
		<s:Label id="titleLabel" left="0" right="0" top="0" fontSize="14" fontWeight="bold"
				 text="{articleTitle}"/>		
	</s:Group>
	<s:Group width="100%">
		<s:Label text="Authors"  top="0" left="0" />
		<s:Label id="authorsLineLabel" top="0" left="55" right="0"
				 text="{authorsLine}"/>
	</s:Group>
	<s:Group width="100%">
		<s:Label text="Journal"  top="0" left="0" />
		<s:Label id="journalAbbrLabel" top="0" left="55" right="0"
				 text="{journalAbbr}" />
		<s:Label id="journalTitleLabel" top="20" left="55" right="0"
				 text="{journalTitle}"/>
	</s:Group>
	<s:Group width="100%">
		<s:Label text="Year"  top="0" left="0" />
		<s:Label id="yearLabel" top="0" left="55" width="61"
				 text="{year}"/>			
	</s:Group>
	<s:Group width="100%">
		<s:Label text="Vol."  top="0" left="0"  />
		<s:HGroup top="0" left="55" right="0">
			<s:Label id="volumeLabel" text="{volume}"/>
			<s:Label id="issueLabel" text="{issue}"/>
			<s:Label id="pagesLabel" text="{pages}"/>				
		</s:HGroup>
	</s:Group>
	<s:Group width="100%">
		<s:Label left="0" top="0" fontWeight="bold" text="Abstract"/>
		<s:Label id="abstractLabel" top="20" left="0" right="0"
				 text="{abstract}"/>
	</s:Group>
	<s:Group width="100%">
		<s:Label left="0" top="0" fontWeight="bold" text="Keywords"/>
		<s:Label id="keywordsLabel" top="20" left="0" right="0"
				 text="{keywordsLine}"/>
	</s:Group>
	<s:Group width="100%">
		<s:Label text="PMID"  top="0" left="0" />
		<s:Label id="pmidLabel" top="0" left="55" right="0"
				 text="{pmid}"/>
	</s:Group>
	<s:Group width="100%">
		<s:Label text="DOI"  top="0" left="0" />
		<s:Label id="doiLabel" top="0" left="55" right="0"
				 text="{doi}"/>
	</s:Group>
	<s:Group width="100%">
		<s:Label text="URLs"  top="0" left="0" />
		<s:Label id="urlsLabel" top="0" left="55" right="0"
				 text="{urlsLine}"/>
	</s:Group>
</s:Group>
