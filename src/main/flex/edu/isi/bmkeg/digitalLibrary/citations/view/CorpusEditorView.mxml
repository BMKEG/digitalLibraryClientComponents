<?xml version="1.0" encoding="utf-8"?>
<s:BorderContainer xmlns:fx="http://ns.adobe.com/mxml/2009"
				   xmlns:s="library://ns.adobe.com/flex/spark"
				   xmlns:mx="library://ns.adobe.com/flex/mx"
				   contentBackgroundColor="#FFFFFF"
				   creationComplete="init()"
				   defaultButton="{saveButton}">	
	<s:layout>
		<s:VerticalLayout gap="5" paddingBottom="10"/>
	</s:layout>
	<fx:Binding destination="nameTextInput.text"
				source="corpusName"
				twoWay="true" />
	<fx:Binding destination="descriptionTextInput.text"
				source="corpusDescription"
				twoWay="true" />

	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
		<mx:StringValidator id="sv"
							source="{nameTextInput}"
							property="text"
							required="true" />
		
	</fx:Declarations>
	<fx:Script>
		<![CDATA[
			import edu.isi.bmkeg.digitalLibrary.citations.events.UserRequestCorpusEditorEvent;
			import edu.isi.bmkeg.digitalLibrary.citations.events.UserRequestSaveCorpusEvent;
			import edu.isi.bmkeg.digitalLibrary.model.citations.Corpus;
			
			import mx.controls.Alert;
			import mx.core.UIComponent;
			import mx.validators.Validator;
			
			// TODO Some improvements:
			//   - Validate corpusName is unique
			//   - Enable [Save] button only when all fields are valid
			
			public static const CORPUS_ID_CHANGED:String = "corpusIdChanged";
			
			private var _myValidators:Array;
			
			private var _corpusId:int;
			
			[Bindable]
			public var corpusName:String;
			
			[Bindable]
			public var corpusDescription:String;
			
			
			// API Methods
			
			[Bindable("corpusIdChanged")]
			public function get corpusId():int
			{
				return _corpusId;
			}
			
			public function set corpusId(v:int):void
			{
				if (_corpusId != v)
				{
					_corpusId = v;
					dispatchEvent(new Event(CORPUS_ID_CHANGED));					
				}
			}
			
			public function clearFormFields():void
			{
				corpusId  = -1;
				corpusName = "";
				corpusDescription = "";
				
				clearValidationErrors();
				
			}
			
			public function instantiateCorpus():Corpus
			{
				var corpus:Corpus  = new Corpus();
				
				corpus.vpdmfId = corpusId;
				corpus.name = corpusName;
				corpus.description = corpusDescription;
				return corpus;
			}

			public function loadCorpusFields(corpus:Corpus):void
			{
				corpusId = corpus.vpdmfId;
				corpusName = corpus.name;
				corpusDescription = corpus.description;
			}
			
			private function clearValidationErrors():void
			{				
				if (_myValidators)
				{
					for (var i:int = 0; i < _myValidators.length; i++) 
					{
						var v:Validator = _myValidators[i] as Validator;
						
						if (v && v.source && v.source is UIComponent)
						{
							UIComponent(v.source).errorString = "";
						}
						
					}
				}
			}
			
			private function saveButtonClickEventHandler(event:MouseEvent):void
			{
				var errorsArray:Array = Validator.validateAll(_myValidators);
				
				if (errorsArray.length == 0)
				{
					dispatchEvent(new UserRequestSaveCorpusEvent(instantiateCorpus()));
				}
			}

			private function cancelButtonClickEventHandler(event:MouseEvent):void
			{
				dispatchEvent(new UserRequestCorpusEditorEvent(UserRequestCorpusEditorEvent.CLOSE));
			}
			
			private function init():void
			{
				_myValidators = [sv];
			}

		]]>
	</fx:Script>
	<s:Form id="form1" left="10" right="0" top="10" bottom="534">
		<s:layout>
			<s:FormLayout/>
		</s:layout>
		<s:FormHeading label="Corpus"/>
		<s:FormItem label="Name" required="true">
			<s:TextInput id="nameTextInput" width="200"
						 text="{corpusName}"/>
		</s:FormItem>
		<s:FormItem label="Description">
			<s:TextInput id="descriptionTextInput" width="200" 
						 text="{corpusDescription}"/>
		</s:FormItem>
	</s:Form>
	<s:HGroup paddingLeft="10">
		<s:Button id="saveButton" x="10" y="214" label="Save" click="saveButtonClickEventHandler(event)" />
		<s:Button id="cancelButton" x="88" y="214" label="Cancel"
				  click="cancelButtonClickEventHandler(event)"/>		
	</s:HGroup>
</s:BorderContainer>
